@{
    ViewData["Title"] = "Roulette";
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
    }

    h1 {
        color: #333;
    }

    #gameInfo,
    #betTypes,
    #betTypeStats,
    label {
        margin-bottom: 10px;
        display: block;
    }


    #gameInfo {
        text-align: center;
    }

    #betTypeStats {
        border: 1px solid gray;
    }

    select,
    input {
        margin-bottom: 20px;
    }

    button {
        padding: 10px;
        background-color: #4caf50;
        color: #fff;
        border: none;
        cursor: pointer;
        border-radius: 4px;
    }

        button:hover {
            background-color: #45a049;
        }

    .singleNumberBet{
        display: none;
    }
</style>

<div id="gameInfo">
    <!-- Game info will be displayed here -->
</div>

<div>
    <label for="betTypeDropdown">Select Bet Type:</label>
    <select id="betTypeDropdown" onchange="updateStats()">
        <!-- Bet types will be displayed here -->
    </select>
</div>

<div id="betTypes">
    <!-- Stats for the selected bet type will be displayed here -->
</div>

<div id="betTypeStats">
    <!-- Stats for the selected bet type will be displayed here -->
</div>

<div>
    <div class="balance">Current Balance: $<span id="balanceDisplay">0</span></div>

    <label for="betAmount">Bet Amount:</label>
    <input type="number" id="betAmount" min="1" value="1">
    <div class="singleNumberBet" id="singleNumberBet">
        <label for="betNumber">Bet on a number between 0 & 36</label>
        <input type="number" id="betNumber" min="0" max="36" value="0"/>
    </div>
   
</div>

<button onclick="spin()">Spin</button>

  


<script>
    // Retrieve user email from session cookie
    var userEmail = getCookie('user_email');
    var userPassword = getCookie('user_password');

    // Make a request to get user information including balance
    fetch('http://localhost:9001/get/user?email=' + userEmail + '&password=' + userPassword)
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Failed to fetch user information.');
            }
        })
        .then(user => {
            displayBalance(user.balance);
        })
        .catch(error => {
            console.error('Error:', error.message);
        });

    function displayBalance(balance) {
        // Display the user's balance on the dashboard
        document.getElementById('balanceDisplay').innerText = balance.toFixed(2);
    }

    // Fetch roulette game info
    fetch('http://localhost:9002/get/game_type/1')
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Failed to fetch roulette game information.');
            }
        })
        .then(rouletteGame => {
            displayGameInfo(rouletteGame);
            fetchBetTypes(rouletteGame.gameTypeId);
        })
        .catch(error => {
            console.error('Error:', error.message);
        });

    // Display roulette game info
    function displayGameInfo(rouletteGame) {
        var gameInfoElement = document.getElementById('gameInfo');
        gameInfoElement.innerHTML = `<h1>Game: ${rouletteGame.name}</h1>
                                    <p>Description: ${rouletteGame.description}</p>`;
    }

    // Fetch bet types associated with the roulette game
    function fetchBetTypes(gameId) {
        fetch(`http://localhost:9002/get/game_bet_types/${gameId}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch bet types information.');
                }
            })
            .then(betTypes => {
                displayBetTypes(betTypes);
            })
            .catch(error => {
                console.error('Error:', error.message);
            });
    }

    // Display bet types in the dropdown
    function displayBetTypes(betTypes) {
        var betTypeDropdown = document.getElementById('betTypeDropdown');

        // Clear existing options
        betTypeDropdown.innerHTML = '';

        // Fetch detailed information for each bet_type and populate the dropdown
        betTypes.forEach(betType => {
            fetch(`http://localhost:9002/get/bet_type/${betType.betTypeId}`)
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Failed to fetch detailed bet type information.');
                    }
                })
                .then(detailedBetType => {
                    var option = document.createElement('option');
                    option.value = detailedBetType.betTypeId;
                    option.text = detailedBetType.name;
                    betTypeDropdown.appendChild(option);
                })
                .catch(error => {
                    console.error('Error:', error.message);
                });
        });

        // Update stats when the page loads with the first bet type
        updateStats();
    }

    // Update stats when the user selects a different bet type
    function updateStats() {
        var selectedBetTypeId = document.getElementById('betTypeDropdown').value;

        fetch(`http://localhost:9002/get/bet_type/${selectedBetTypeId}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch detailed bet type information.');
                }
            })
            .then(detailedBetType => {
                // Display detailed information for the selected bet type
                var betTypeStatsElement = document.getElementById('betTypeStats');
                var singleNumberBet = document.getElementById('singleNumberBet');

                betTypeStatsElement.innerHTML = `<h2>${detailedBetType.name} Stats</h2>
                                                   <p>Multiplier: ${detailedBetType.multiplier}</p>
                                                   <p>Min Bet: ${detailedBetType.minBet}</p>
                                                   <p>Max Bet: ${detailedBetType.maxBet}</p>`;
                if(detailedBetType.name == "Exact Number"){
                    singleNumberBet.style.display = 'block';
                } else {
                    singleNumberBet.style.display = 'none';

                }
            })
            .catch(error => {
                console.error('Error:', error.message);
            });
    }

    // Function to handle spin logic (you can implement this later)
    function spin() {

        callPostBet()
        console.log("Spin complete...")
       // console.log(`Spinning with Bet Type ID: ${selectedBetTypeId}, Bet Amount: ${betAmount}`);
    }

    async function postBet() {
        var bet_type = document.getElementById('betTypeDropdown').value;
        var bet_amount = document.getElementById('betAmount').value;
        var bet_number = document.getElementById('betNumber').value;
       // const userEmail = "1@1.dk"; // Replace with your actual user email
       // const userPassword = "123"; // Replace with your actual user password

        const postBetApiUri = `http://localhost:9002/post/bet?bet_type=${bet_type}&bet_amount=${bet_amount}&bet_number=${bet_number}&email=${encodeURIComponent(userEmail)}&password=${encodeURIComponent(userPassword)}`;

        console.log(postBetApiUri);

        const response = await fetch(postBetApiUri, {
            method: 'POST',
        });

        return response.json();
    }

    async function callPostBet() {
        postBet().then(data => {
            console.log("DATA: " + JSON.stringify(data));
            var prevBalance = parseFloat(document.getElementById('balanceDisplay').innerText);
            document.getElementById('balanceDisplay').innerText = (prevBalance + data).toFixed(2);

        });
    }
</script>